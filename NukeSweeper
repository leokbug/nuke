set cut_paste_input [stack 0]
push $cut_paste_input
NoOp {
 name NukeSweeper
 onDestroy nuke.thisNode().knob('finish').execute()
 tile_color 0xbcbcbcff
 note_font "Georgia Bold"
 note_font_size 12
 hide_input true
 addUserKnob {20 Nukesweeper}
 addUserKnob {35 difficulty l Difficulty M {Preset/Beginner "knobs this \{rows 9 columns 9 nukes 10\}" Preset/Intermediate "knobs this \{rows 16 columns 16 nukes 40\}" Preset/Expert "knobs this \{rows 16 columns 30 nukes 99\}"}}
 addUserKnob {3 rows}
 rows 9
 addUserKnob {3 columns}
 columns 9
 addUserKnob {3 nukes}
 nukes 10
 addUserKnob {22 Start l "Start Game" T "import random\nimport time\npath = nuke.env\['ExecutablePath']\[0:nuke.env\['ExecutablePath'].rfind('/')+1] + \"plugins/icons/\"\nthis = nuke.thisNode()\nrows = int(this.knob('rows').value())\ncolumns = int(this.knob('columns').value())\nspacing = 1\nnukes = int(this.knob('nukes').value())\ncellSize = 40\ncenterX = int(this.xpos()+this.screenWidth()/2)-int((cellSize+spacing)*columns/2)\ncenterY = int(this.ypos())+100\ncellDefaultColor = 555819519\nbombColor = 2902458623\nzeroTileColor = 3166485759\nnonzeroTileColor = 2475922431\ndarkGreyTile = 1263225855\n\n\ndef assignControls():\n\t#Add menu and shortcuts\n\tmenubar = nuke.menu(\"Nuke\");\n\tm = menubar.addMenu('MineSweeper')\n\t#Movement Keys\n\tm.addCommand('Up', \"navigate(\[0,-1])\" , 'up')\n\tm.addCommand('Down', \"navigate(\[0,1])\" , 'down')\n\tm.addCommand('Left', \"navigate(\[-1,0])\" , 'left')\n\tm.addCommand('Right', \"navigate(\[1,0])\" , 'right')  \n\tm.addCommand('Mark as Bomb', \"mark()\" , 'x') \n\tm.addCommand('Check', \"click()\" , 'z')\n\n\n\n\n\ndef verifySettings():\n\tif columns*rows<nukes:\n\t\treturn False\n\telse:\n\t\treturn True\n\n\ndef validateSelection():\n\tif len(nuke.selectedNodes()) == 1 and nuke.selectedNode() in cellDict():\n\t\treturn True\n\telse:\n\t\treturn False\n\n\ndef getSelected():\n\tif validateSelection() == True:\n\t\treturn nuke.selectedNode()\n\telse:\n\t\tpass\n\n\ndef navigate(dir):\n\n\tif validateSelection() == True:\n\t\tr = int(getSelected().knob('rKnob').value())\n\t\tc = int(getSelected().knob('cKnob').value())\n\t\tfor n in nuke.allNodes():\n\t\t\tn.setSelected(False)\n\t\tfindCell((c+dir\[0])%columns,(r+dir\[1])%rows).setSelected(True)\n\telse:\n\t\tfor n in nuke.allNodes():\n\t\t\tn.setSelected(False)\n\t\tfindCell(0,0).setSelected(True)\n\n\ndef cell(x,y,c,r):\n\tcell = nuke.nodes.BackdropNode()\n\tcell.knob('name').setValue('')\n\tcell.knob('tile_color').setValue(cellDefaultColor)\n\tcell.knob('bdwidth').setValue(cellSize)\n\tcell.knob('bdheight').setValue(cellSize)\n\tcell.knob('note_font_size').setValue(18)\n\tcell.knob('note_font').setValue('Verdana Bold')\n\tcell.setXpos(x)\n\tcell.setYpos(y)\n\n\tfor n in \['isBomb','rKnob','cKnob','bombCount','isMarked', 'isVisible']:\n\t\tn = nuke.Array_Knob(n,n)\n\t\tcell.addKnob(n)\n\t\tn.setVisible(False)\n\tcell.knob('rKnob').setValue(r)\n\tcell.knob('cKnob').setValue(c)\n\tcell.knob('isBomb').setValue(0)\n\tcell.knob('bombCount').setValue(0)\n\tcell.knob('isMarked').setValue(0)\n\tcell.knob('isVisible').setValue(0)\n\n\ndef cellDict():\n\tcellDict = \{\}\n\tfor n in nuke.allNodes('BackdropNode'):\n\t\tif n.knob('rKnob') is not None and n.knob('cKnob') is not None:\n\t\t\tcellDict.update(\{n: \[int(n.knob('rKnob').value()),int(n.knob('cKnob').value())]\})\n\treturn cellDict\n\n\ndef findCell(c,r):\n\n\tfor cell in cellDict():\n\t\tif int(cell.knob('rKnob').value()) == int(r) and int(cell.knob('cKnob').value()) == int(c):\n\t\t\treturn cell\n\t\telse:\n\t\t\tpass\n\n\ndef makeGrid():\n\tprogressBar = nuke.ProgressTask('Creating the grid.')\n\ttasks = int(rows*columns)\n\tfor r in range(0,rows):\n\t\tfor c in range(0,columns):\n\t\t\tprogressBar.setProgress(int(100*((r+1)*columns+(c+1))/tasks))\n\t\t\tprogressBar.setMessage(\"Making cell %s in row %d\" % (c, r))\n\t\t\tcell(centerX+c*(cellSize+spacing), centerY+(r*cellSize+spacing),c,r)\n\n\tthis.knob('label').setValue('Nukes left: '+ str(int(nukes)))\n\tprogressBar.setProgress(100)\n\tthis.knob('runTimer').setValue(1)\n\n\ndef setBombs():\n\tprogressBar = nuke.ProgressTask('Planting Nukes')\n\ttasks = nukes\n\tfor i in range(0,nukes):\n\t\twhile True:\n\t\t\tx = random.randint(0,columns-1)\n\t\t\ty = random.randint(0,rows-1)\n\t\t\tif findCell(x,y).knob('isBomb').value() == 0:\n\t\t\t\tfindCell(x,y).knob('isBomb').setValue(1)\n\t\t\t\tprogressBar.setProgress(int(100*i/tasks))\n\t\t\t\tprogressBar.setMessage(\"Planting nuke %s out of %d\" % (i, tasks))\n\t\t\t\tbreak\n\tprogressBar.setProgress(100)\n\n\n\ndef checkNeighbours(node):\n\tif node.knob('cKnob') is not None and node.knob('rKnob') is not None:\n\t\tdirs = \[\[-1,-1],\[-1,0],\[0,-1],\[-1,1],\[1,-1],\[0,1],\[1,0],\[1,1]]\n\t\tc = node.knob('cKnob').value()\n\t\tr = node.knob('rKnob').value()\n\t\tval = 0\n\t\tfor i in range (0,len(dirs)):\n\t\t\tif findCell(c+dirs\[i]\[0],r+dirs\[i]\[1]) is None:\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tval += int(findCell(c+dirs\[i]\[0],r+dirs\[i]\[1]).knob('isBomb').value())\n\t\t\tnode.knob('bombCount').setValue(val)\n\n\ndef checkNeighboursForAll():\n\tprogressBar = nuke.ProgressTask('Counting Bombs around each cell')\n\ttasks = len(cellDict())\n\ti = 0\n\tfor cell in cellDict():\n\t\ti += 1\n\t\tprogressBar.setProgress(int(100*i/tasks))\n\t\tprogressBar.setMessage(\"Checking cell %s out of %d\" % (i, tasks))\n\t\tif cell.knob('isBomb').value() == 1:\n\t\t\tpass\n\t\telse:\n\t\t\tcheckNeighbours(cell)\n\tprogressBar.setProgress(100)\n\n\ndef startTimer():\n\tthis.knob('timer').setValue(int(time.time()))\n\n\ndef click():\n\n\tif validateSelection() == False or this.knob('runTimer').value() == 0:\n\t\tpass\n\n\telif this.knob('clicks').value() == 0 and getSelected().knob('isBomb').value() == 1:\n\t\tfixFirstClick()\n\telse:\n\t\tif getSelected().knob('isMarked').value() >= 1:\n\t\t\tpass\n\n\t\telif getSelected().knob('isBomb').value() == 1:\n\t\t\tfor n in cellDict():\n\t\t\t\tif n.knob('isBomb').value() == 1:\n\t\t\t\t\treveal(n)\n\t\t\tgameOver()\n\n\t\telif getSelected().knob('bombCount').value() > 0:\n\t\t\treveal(getSelected())\n\n\t\telif getSelected().knob('bombCount').value() == 0:\n\t\t\tsearch(getSelected())\n\tclicks = this.knob('clicks').value()\n\tthis.knob('clicks').setValue(clicks+1)\n\tcheckIfWon()\n\n\ndef fixFirstClick():\n\n\t#If first click is on a bomb, move the bomb somewhere else\n\tgetSelected().knob('isBomb').setValue(0)\n\n\tnotBombs = \[]\n\tfor cell in cellDict():\n\t\tif cell.knob('isBomb').value() == 0 and cell != getSelected():\n\t\t\tnotBombs.append(cell)\n\tindex = random.randint(0,len(notBombs)-1)\n\tnewBomb = notBombs\[index]\n\tnewBomb.knob('isBomb').setValue(1)\n\n\tc1 = getSelected().knob('cKnob').value()\n\tr1 = getSelected().knob('rKnob').value()\n\tc2 = newBomb.knob('cKnob').value()\n\tr2 = newBomb.knob('rKnob').value()\n\n\trootCoords = \[\[c1,r1],\[c2,r2]]\n\tdirs = \[\[-1,-1], \[-1,0], \[0,-1], \[-1,1], \[1,-1], \[0,1], \[1,0], \[1,1]]\n\n\tfor k in range(0,2):\n\t\tfor i in range (0,len(dirs)):\n\t\t\tif findCell(rootCoords\[k]\[0]+dirs\[i]\[0],rootCoords\[k]\[1]+dirs\[i]\[1]) is None:\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tcheckNeighbours(findCell(rootCoords\[k]\[0]+dirs\[i]\[0],rootCoords\[k]\[1]+dirs\[i]\[1]))\n\n\tcheckNeighbours(getSelected())\n\tclick()\n\n\ndef mark():\n\tmarkedList = \[]\n\n\tif validateSelection() == False:\n\t\tpass\n\n\telif getSelected().knob('isVisible').value() == 1:\n\t\tpass\n\n\telse:\n\n\t\tif getSelected().knob('isMarked').value() == 0:\n\t\t\tgetSelected().knob('isMarked').setValue(1)\n\t\t\tgetSelected().knob('tile_color').setValue(2507730431)\n\t\t\tgetSelected().knob('label').setValue(\"<center><img src='\" + path + 'MergeMultiply.png' + \"'>\")\n\n\t\telif getSelected().knob('isMarked').value() == 1:\n\t\t\tgetSelected().knob('isMarked').setValue(2)\n\t\t\tgetSelected().knob('tile_color').setValue(2878664191)\n\t\t\tgetSelected().knob('label').setValue(\"<center><img src='\" + path + 'CompareMetaData.png' + \"'>\")\n\n\t\telse:\n\t\t\tgetSelected().knob('isMarked').setValue(0)\n\t\t\tgetSelected().knob('tile_color').setValue(555819519)\n\t\t\tgetSelected().knob('label').setValue('')\n\n\tfor n in cellDict():\n\t\tif n.knob('isMarked').value() == 1:\n\t\t\tmarkedList.append(n)\n\n\tthis.knob('label').setValue('Nukes left: '+ str(int(nukes)-int(len(markedList))))\n\n\ndef reveal(n):\n\tif int(n.knob('isVisible').value()) == 1:\n\t\tpass\n\telse:\n\t\tn.knob('isVisible').setValue(1)\n\n\tif n.knob('isBomb').value() == 1:\n\t\tn.knob('label').setValue(\"<center><img src='\" + path + 'NukeApp32.png' + \"'>\")\n\n\t\tif n == getSelected():\n\t\t\tn.knob('tile_color').setValue(bombColor)\n\t\telif n.knob('isMarked').value() == 0:\n\t\t\tn.knob('tile_color').setValue(darkGreyTile)\n\t\telse:\n\t\t\tpass\n\telif int(n.knob('bombCount').value()) > 0:\n\t\tn.knob('tile_color').setValue(nonzeroTileColor)\n\n\t\t#font colours with html to force nuke to display them correctly\n\t\tif int(n.knob('bombCount').value()) == 1:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(50,77,255)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 2:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(0,95,0)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 3:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(163,0,0)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 4:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(0,48,153)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 5:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(84,0,0)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 6:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(17,94,94)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 7:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(3,3,3)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\t\telif int(n.knob('bombCount').value()) == 8:\n\t\t\tn.knob('label').setValue(\"<center><p style = 'color:rgb(80,80,80)'>\" + str(int(n.knob('bombCount').value()))+\"</p>\")\n\telif int(n.knob('bombCount').value()) == 0:\n\t\tn.knob('tile_color').setValue(zeroTileColor)\n\n\ndef search(n):\n\n\treveal(n)\n\tif n.knob('bombCount').value()!= 0 or n.knob('isBomb').value() ==1:\n\t\tpass\n\n\telse:\n\n\t\tr = int(n.knob('rKnob').value())\n\t\tc = int(n.knob('cKnob').value())\n\n\t\tneighbours = \[findCell(c-1,r-1),findCell(c-1,r),findCell(c,r-1),findCell(c-1,r+1),findCell(c+1,r-1),findCell(c,r+1),findCell(c+1,r),findCell(c+1,r+1)]\n\t\t\n\t\tfor cell in neighbours:\n\t\t\tif cell is None:\n\t\t\t\tpass\n\t\t\telif int(cell.knob('isVisible').value()) ==1:\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tsearch(cell)\n\n\ndef startGame():\n\n\tif verifySettings() == False:\n\t\tnuke.message ('Settings Incorrect . More nukes than cells.')\n\n\telse:\n\t\tmakeGrid()\n\t\tassignControls()\n\t\tsetBombs()\n\t\tcheckNeighboursForAll()\n\t\tstartTimer()\n\n\ndef finalTime():\n\tfinalTime = int(time.time()) - int(this.knob('timer').value())\n\tminutes = str(int((finalTime - finalTime%60)/60))\n\tif int(finalTime%60)<=9:\n\t\tseconds = str('0'+ str(int(finalTime%60)))\n\telse:\n\t\tseconds = str(int(finalTime%60))\n\treturn str(minutes +':' + seconds)\n\n\ndef checkIfWon():\n\tcellList = \[]\n\texposedMineList = \[]\n\tfor n in cellDict():\n\t\tif n.knob('isBomb').value() == 0 and n.knob('isVisible').value() ==1:\n\t\t\tcellList.append(n)\n\t\telif n.knob('isBomb').value() == 1 and n.knob('isVisible') == 1:\n\t\t\texposedMineList.append(n)\n\n\tif int(len(cellList) + nukes) == len(cellDict()) and len(exposedMineList) ==0:\n\t\tfor n in cellDict():\n\t\t\tif n.knob('isBomb').value() == 1:\n\t\t\t\treveal(n)\n\t\tthis.knob('runTimer').setValue(0)\n\n\t\tresult = finalTime()\n\t\tnuke.message('Congratulations! You won! Your final time is ' + result)\n\t\tthis.knob('label').setValue('You Won!\\nYour final time: ' + result)\n\n\telse:\n\t\tpass\n\n\ndef gameOver():\n\tthis.knob('runTimer').setValue(0)\n\tresult = finalTime()\n\tnuke.message('You lost! Your game lasted: ' + result)\n\tthis.knob('label').setValue('Game over.\\n Your game lasted: ' + result)\n\n\n\nthis.knob('finish').execute()\nstartGame()" +STARTLINE}
 addUserKnob {22 finish l Reset -STARTLINE T "this = nuke.thisNode() \nthis.knob('timer').setValue(0)\nthis.knob('runTimer').setValue(0)\nnuke.menu('Nuke').removeItem('MineSweeper')\nfor n in nuke.allNodes('BackdropNode'):\n\tif n.knob('isBomb') is not None:\n\t\tnuke.delete(n)\nthis.knob('label').setValue('')\nthis.knob('clicks').setValue(0)"}
 addUserKnob {26 controls l Controls T "\nKeyboard arrows to navigate\n'Z' to reveal the cell\n'X' to mark the cell as a nuke"}
 addUserKnob {26 ""}
 addUserKnob {3 runTimer l INVISIBLE -STARTLINE +INVISIBLE}
 addUserKnob {3 timer l INVISIBLE +INVISIBLE}
 addUserKnob {3 clicks l INVISIBLE +INVISIBLE}
 addUserKnob {26 credit l "NukeSweeper v1.0.0" T "\nby @uselesscompthings\n\tMateusz Krząstek"}
}
